use super::arg::OperandSymbol::*;
use super::builtin_instr::cpu_instr::mnemonic::*;
use super::builtin_instr::directive::BindingDirective;
use super::builtin_instr::directive::{BindingDirective::*, SimpleDirective::*};
use super::builtin_instr::UnboundBuiltinInstrMnemonic;
use super::builtin_instr::{BuiltinInstrMnemonic::*, UnboundBuiltinInstrMnemonic::*};
use super::Keyword;
use super::Keyword::*;

pub(super) const KEYWORDS: &[(&str, Keyword<BindingDirective, UnboundBuiltinInstrMnemonic>)] = &[
    ("A", Operand(A)),
    ("ADC", BuiltinInstr(Unbound(CpuInstr(ADC)))),
    ("ADD", BuiltinInstr(Unbound(CpuInstr(ADD)))),
    ("AF", Operand(Af)),
    ("AND", BuiltinInstr(Unbound(CpuInstr(AND)))),
    ("B", Operand(B)),
    ("BC", Operand(Bc)),
    ("BIT", BuiltinInstr(Unbound(CpuInstr(BIT)))),
    ("C", Operand(C)),
    ("CALL", BuiltinInstr(Unbound(CpuInstr(CALL)))),
    ("CP", BuiltinInstr(Unbound(CpuInstr(CP)))),
    ("CPL", BuiltinInstr(Unbound(CpuInstr(CPL)))),
    ("D", Operand(D)),
    ("DAA", BuiltinInstr(Unbound(CpuInstr(DAA)))),
    ("DB", BuiltinInstr(Unbound(Directive(Db)))),
    ("DE", Operand(De)),
    ("DEC", BuiltinInstr(Unbound(CpuInstr(DEC)))),
    ("DI", BuiltinInstr(Unbound(CpuInstr(DI)))),
    ("DS", BuiltinInstr(Unbound(Directive(Ds)))),
    ("DW", BuiltinInstr(Unbound(Directive(Dw)))),
    ("E", Operand(E)),
    ("EI", BuiltinInstr(Unbound(CpuInstr(EI)))),
    ("EQU", BuiltinInstr(LabelBound(Equ))),
    ("H", Operand(H)),
    ("HALT", BuiltinInstr(Unbound(CpuInstr(HALT)))),
    ("HL", Operand(Hl)),
    ("HLD", Operand(Hld)),
    ("HLI", Operand(Hli)),
    ("INC", BuiltinInstr(Unbound(CpuInstr(INC)))),
    ("INCLUDE", BuiltinInstr(Unbound(Directive(Include)))),
    ("JP", BuiltinInstr(Unbound(CpuInstr(JP)))),
    ("JR", BuiltinInstr(Unbound(CpuInstr(JR)))),
    ("L", Operand(L)),
    ("LD", BuiltinInstr(Unbound(CpuInstr(LD)))),
    ("LDHL", BuiltinInstr(Unbound(CpuInstr(LDHL)))),
    ("MACRO", BuiltinInstr(LabelBound(Macro))),
    ("NC", Operand(Nc)),
    ("NOP", BuiltinInstr(Unbound(CpuInstr(NOP)))),
    ("NZ", Operand(Nz)),
    ("OR", BuiltinInstr(Unbound(CpuInstr(OR)))),
    ("ORG", BuiltinInstr(Unbound(Directive(Org)))),
    ("POP", BuiltinInstr(Unbound(CpuInstr(POP)))),
    ("PUSH", BuiltinInstr(Unbound(CpuInstr(PUSH)))),
    ("RES", BuiltinInstr(Unbound(CpuInstr(RES)))),
    ("RET", BuiltinInstr(Unbound(CpuInstr(RET)))),
    ("RETI", BuiltinInstr(Unbound(CpuInstr(RETI)))),
    ("RL", BuiltinInstr(Unbound(CpuInstr(RL)))),
    ("RLA", BuiltinInstr(Unbound(CpuInstr(RLA)))),
    ("RLC", BuiltinInstr(Unbound(CpuInstr(RLC)))),
    ("RLCA", BuiltinInstr(Unbound(CpuInstr(RLCA)))),
    ("RR", BuiltinInstr(Unbound(CpuInstr(RR)))),
    ("RRA", BuiltinInstr(Unbound(CpuInstr(RRA)))),
    ("RRC", BuiltinInstr(Unbound(CpuInstr(RRC)))),
    ("RRCA", BuiltinInstr(Unbound(CpuInstr(RRCA)))),
    ("RST", BuiltinInstr(Unbound(CpuInstr(RST)))),
    ("SBC", BuiltinInstr(Unbound(CpuInstr(SBC)))),
    ("SECTION", BuiltinInstr(LabelBound(Section))),
    ("SET", BuiltinInstr(Unbound(CpuInstr(SET)))),
    ("SLA", BuiltinInstr(Unbound(CpuInstr(SLA)))),
    ("SP", Operand(Sp)),
    ("SRA", BuiltinInstr(Unbound(CpuInstr(SRA)))),
    ("SRL", BuiltinInstr(Unbound(CpuInstr(SRL)))),
    ("STOP", BuiltinInstr(Unbound(CpuInstr(STOP)))),
    ("SUB", BuiltinInstr(Unbound(CpuInstr(SUB)))),
    ("SWAP", BuiltinInstr(Unbound(CpuInstr(SWAP)))),
    ("XOR", BuiltinInstr(Unbound(CpuInstr(XOR)))),
    ("Z", Operand(Z)),
];
