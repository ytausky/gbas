use super::{Keyword, Keyword::*};

use crate::analyze::semantics::arg::OperandSymbol::*;
use crate::analyze::semantics::builtin_instr::cpu_instr::mnemonic::*;
use crate::analyze::semantics::builtin_instr::directive::{
    BindingDirective::*, Directive::*, SimpleDirective::*,
};
use crate::analyze::semantics::builtin_instr::BuiltinInstr::*;

pub(super) const KEYWORDS: &[(&str, Keyword)] = &[
    ("A", Operand(A)),
    ("ADC", BuiltinInstr(Mnemonic(ADC))),
    ("ADD", BuiltinInstr(Mnemonic(ADD))),
    ("AF", Operand(Af)),
    ("AND", BuiltinInstr(Mnemonic(AND))),
    ("B", Operand(B)),
    ("BC", Operand(Bc)),
    ("BIT", BuiltinInstr(Mnemonic(BIT))),
    ("C", Operand(C)),
    ("CALL", BuiltinInstr(Mnemonic(CALL))),
    ("CP", BuiltinInstr(Mnemonic(CP))),
    ("CPL", BuiltinInstr(Mnemonic(CPL))),
    ("D", Operand(D)),
    ("DAA", BuiltinInstr(Mnemonic(DAA))),
    ("DB", BuiltinInstr(Directive(Simple(Db)))),
    ("DE", Operand(De)),
    ("DEC", BuiltinInstr(Mnemonic(DEC))),
    ("DI", BuiltinInstr(Mnemonic(DI))),
    ("DS", BuiltinInstr(Directive(Simple(Ds)))),
    ("DW", BuiltinInstr(Directive(Simple(Dw)))),
    ("E", Operand(E)),
    ("EI", BuiltinInstr(Mnemonic(EI))),
    ("EQU", BuiltinInstr(Directive(Binding(Equ)))),
    ("H", Operand(H)),
    ("HALT", BuiltinInstr(Mnemonic(HALT))),
    ("HL", Operand(Hl)),
    ("HLD", Operand(Hld)),
    ("HLI", Operand(Hli)),
    ("INC", BuiltinInstr(Mnemonic(INC))),
    ("INCLUDE", BuiltinInstr(Directive(Simple(Include)))),
    ("JP", BuiltinInstr(Mnemonic(JP))),
    ("JR", BuiltinInstr(Mnemonic(JR))),
    ("L", Operand(L)),
    ("LD", BuiltinInstr(Mnemonic(LD))),
    ("LDHL", BuiltinInstr(Mnemonic(LDHL))),
    ("MACRO", BuiltinInstr(Directive(Binding(Macro)))),
    ("NC", Operand(Nc)),
    ("NOP", BuiltinInstr(Mnemonic(NOP))),
    ("NZ", Operand(Nz)),
    ("OR", BuiltinInstr(Mnemonic(OR))),
    ("ORG", BuiltinInstr(Directive(Simple(Org)))),
    ("POP", BuiltinInstr(Mnemonic(POP))),
    ("PUSH", BuiltinInstr(Mnemonic(PUSH))),
    ("RES", BuiltinInstr(Mnemonic(RES))),
    ("RET", BuiltinInstr(Mnemonic(RET))),
    ("RETI", BuiltinInstr(Mnemonic(RETI))),
    ("RL", BuiltinInstr(Mnemonic(RL))),
    ("RLA", BuiltinInstr(Mnemonic(RLA))),
    ("RLC", BuiltinInstr(Mnemonic(RLC))),
    ("RLCA", BuiltinInstr(Mnemonic(RLCA))),
    ("RR", BuiltinInstr(Mnemonic(RR))),
    ("RRA", BuiltinInstr(Mnemonic(RRA))),
    ("RRC", BuiltinInstr(Mnemonic(RRC))),
    ("RRCA", BuiltinInstr(Mnemonic(RRCA))),
    ("RST", BuiltinInstr(Mnemonic(RST))),
    ("SBC", BuiltinInstr(Mnemonic(SBC))),
    ("SECTION", BuiltinInstr(Directive(Binding(Section)))),
    ("SET", BuiltinInstr(Mnemonic(SET))),
    ("SLA", BuiltinInstr(Mnemonic(SLA))),
    ("SP", Operand(Sp)),
    ("SRA", BuiltinInstr(Mnemonic(SRA))),
    ("SRL", BuiltinInstr(Mnemonic(SRL))),
    ("STOP", BuiltinInstr(Mnemonic(STOP))),
    ("SUB", BuiltinInstr(Mnemonic(SUB))),
    ("SWAP", BuiltinInstr(Mnemonic(SWAP))),
    ("XOR", BuiltinInstr(Mnemonic(XOR))),
    ("Z", Operand(Z)),
];
